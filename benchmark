#!/usr/bin/php
<?php
echo "##########################\n";
echo "# Arionum Benchmark v0.1 #\n";
echo "# www.arionum.com        #\n";
echo "##########################\n\n";
error_reporting(0);
if (!extension_loaded("gmp")) die("gmp php extension missing");
if(floatval(phpversion())<7.2) die("The minimum php version required is 7.2");
if (!defined("PASSWORD_ARGON2I")) die("The php version is not compiled with argon2i support");

ini_set("memory_limit","5G");

class Miner {
	private $public_key;
	private $speed;
	private $avg_speed;
	private $node;
	private $block;
	private $difficulty;
	private $counter;
	private $alltime;
	private $type;
	private $limit;
	private $worker;
	private $last_update;
	private $submit;
	private $confirm;
	private $found;
	public function prepare($difficulty, $limit, $pub, $block, $worker){
		$this->public_key=$pub;
		$this->block=$block;
		$this->worker=$worker;
		$this->counter=0;
		$this->submit=0;
		$this->confirm=0;
		$this->found=0;
		$this->limit=$limit;
		$this->difficulty=$difficulty;
	}

	public function run(){
		$this->alltime=microtime(true);
		$this->begintime=time();
		$it=0;
		$this->counter = 0;
		$start=microtime(true);
		while(1){
			$this->counter++;
			if(time()-$this->last_update>2) {
				echo "--> Last hash rate: ".$this->speed." H/s   Average: ".$this->avg_speed." H/s  Total hashes: ".$this->counter."  Mining Time: ".(time()-$this->begintime)."  Shares: ".$this->confirm." Finds: ".$this->found."\n";
				$this->last_update = time();
			}
		        $nonce=base64_encode(openssl_random_pseudo_bytes(32));
        		$nonce = preg_replace("/[^a-zA-Z0-9]/", "", $nonce);
			$base=$this->public_key."-".$nonce."-".$this->block."-".$this->difficulty;
			$argon=password_hash($base, PASSWORD_ARGON2I, array('memory_cost' => 16384, "time_cost"=>4, "threads"=>4));

			$hash=$base.$argon;
			for($i=0;$i<5;$i++){
				$hash=hash("sha512",$hash,true);
			}		
			$hash=hash("sha512",$hash);
			

			$m=str_split($hash,2);

			$duration=hexdec($m[10]).hexdec($m[15]).hexdec($m[20]).hexdec($m[23]).hexdec($m[31]).hexdec($m[40]).hexdec($m[45]).hexdec($m[55]);
			$duration=ltrim($duration, '0');
						
			$result=gmp_div($duration,$this->difficulty);
			if($result>0&&$result<=$this->limit){
				if($result<=240) {
					$this->found++;
				}else{
					$this->confirm++;
				}
				$this->submit++;
			}
			$it++;
			if($it==100){ 
				$it=0;
				$end=microtime(true);
				$this->speed=100/($end-$start);
				$this->avg_speed=$this->counter/($end-$this->alltime);
				$start=$end;
			}
			
		}

	}	


}

$worker=uniqid();

$miner= new Miner;
$miner->prepare(100000000,50000,"4SxMLLWRCxoL42gqgf2C2x5T5Q1BJhgfQvMsfwrcFAu4owsBYncsvVnBBVqtxVrkqHVZ8nJGrcJB7yWnV92j5Rca","sampledatafornode",$worker);
$miner->run();


?>
